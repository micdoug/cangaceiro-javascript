{"version":3,"sources":["../../../app-src/domain/negociacao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","constructor","connection","_connection","adiciona","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","e","onerror","target","error","listaTodos","openCursor","negociacoes","atual","result","push","value","_data","_quantidade","_valor","continue","apagaTodos","clear"],"mappings":";;;;;;AAASA,gB,iBAAAA,U;;;UAEIC,a,GAAN,MAAMA,aAAN,CAAoB;AACzBC,oBAAYC,UAAZ,EAAwB;AACtB,eAAKC,WAAL,GAAmBD,UAAnB;AACD;;AAEDE,iBAASC,UAAT,EAAqB;AACnB,iBAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,kBAAMC,UAAU,KAAKN,WAAL,CAAiBO,WAAjB,CAA6B,aAA7B,EAA4C,WAA5C,EACbC,WADa,CACD,aADC,EAEbC,GAFa,CAETP,UAFS,CAAhB;;AAIAI,oBAAQI,SAAR,GAAoBC,KAAKP,SAAzB;AACAE,oBAAQM,OAAR,GAAkBD,KAAKN,OAAOM,EAAEE,MAAF,CAASC,KAAhB,CAAvB;AACD,WAPM,CAAP;AAQD;;AAEDC,qBAAa;AACX,iBAAO,IAAIZ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,kBAAMC,UAAU,KAAKN,WAAL,CAAiBO,WAAjB,CAA6B,aAA7B,EAA4C,UAA5C,EACbC,WADa,CACD,aADC,EAEbQ,UAFa,EAAhB;;AAIA,kBAAMC,cAAc,EAApB;AACAX,oBAAQI,SAAR,GAAoBC,KAAK;AACvB,oBAAMO,QAAQP,EAAEE,MAAF,CAASM,MAAvB;AACA,kBAAID,KAAJ,EAAW;AACTD,4BAAYG,IAAZ,CAAiB,IAAIxB,UAAJ,CAAesB,MAAMG,KAAN,CAAYC,KAA3B,EAAkCJ,MAAMG,KAAN,CAAYE,WAA9C,EACfL,MAAMG,KAAN,CAAYG,MADG,CAAjB;AAEAN,sBAAMO,QAAN;AACD,eAJD,MAIO;AACLrB,wBAAQa,WAAR;AACD;AACF,aATD;AAUAX,oBAAQM,OAAR,GAAkBD,KAAKN,OAAOM,EAAEE,MAAF,CAASC,KAAhB,CAAvB;AACD,WAjBM,CAAP;AAkBD;;AAEDY,qBAAa;AACX,iBAAO,IAAIvB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,kBAAMC,UAAU,KAAKN,WAAL,CAAiBO,WAAjB,CAA6B,aAA7B,EAA4C,WAA5C,EACbC,WADa,CACD,aADC,EAEbmB,KAFa,EAAhB;;AAIArB,oBAAQI,SAAR,GAAoBC,KAAKP,SAAzB;AACAE,oBAAQM,OAAR,GAAkBD,KAAKN,OAAOM,EAAEE,MAAF,CAASC,KAAhB,CAAvB;AACD,WAPM,CAAP;AAQD;AA9CwB,O","file":"NegociacaoDao.js","sourcesContent":["import { Negociacao } from './Negociacao.js';\n\nexport class NegociacaoDao {\n  constructor(connection) {\n    this._connection = connection;\n  }\n\n  adiciona(negociacao) {\n    return new Promise((resolve, reject) => {\n      const request = this._connection.transaction(\"negociacoes\", \"readwrite\")\n        .objectStore(\"negociacoes\")\n        .add(negociacao);\n\n      request.onsuccess = e => resolve();\n      request.onerror = e => reject(e.target.error);\n    });\n  }\n\n  listaTodos() {\n    return new Promise((resolve, reject) => {\n      const request = this._connection.transaction(\"negociacoes\", \"readonly\")\n        .objectStore(\"negociacoes\")\n        .openCursor();\n\n      const negociacoes = [];\n      request.onsuccess = e => {\n        const atual = e.target.result;\n        if (atual) {\n          negociacoes.push(new Negociacao(atual.value._data, atual.value._quantidade,\n            atual.value._valor));\n          atual.continue();\n        } else {\n          resolve(negociacoes);\n        }\n      };\n      request.onerror = e => reject(e.target.error);\n    });\n  }\n\n  apagaTodos() {\n    return new Promise((resolve, reject) => {\n      const request = this._connection.transaction(\"negociacoes\", \"readwrite\")\n        .objectStore(\"negociacoes\")\n        .clear();\n\n      request.onsuccess = e => resolve();\n      request.onerror = e => reject(e.target.error);\n    });\n  }\n}"]}