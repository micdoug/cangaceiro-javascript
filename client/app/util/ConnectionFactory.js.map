{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["_connection","_close","ConnectionFactory","constructor","Error","getConnection","Promise","resolve","reject","request","indexedDB","open","onupgradeneeded","e","connection","target","result","_createStores","onsuccess","close","bind","onerror","error","stores","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection"],"mappings":";;;;;;AAAA,UAAIA,cAAc,IAAlB;AACA,UAAIC,SAAS,IAAb;;UAEaC,iB,GAAN,MAAMA,iBAAN,CAAwB;;AAE7BC,sBAAc;AACZ,gBAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,eAAOC,aAAP,GAAuB;AACrB,cAAIL,WAAJ,EAAiB,OAAOA,WAAP;AACjB,iBAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,kBAAMC,UAAUC,UAAUC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAAhB;AACAF,oBAAQG,eAAR,GAA0BC,KAAK;AAC7B,oBAAMC,aAAaD,EAAEE,MAAF,CAASC,MAA5B;AACAd,gCAAkBe,aAAlB,CAAgCH,UAAhC;AACD,aAHD;AAIAL,oBAAQS,SAAR,GAAoBL,KAAK;AACvBb,4BAAca,EAAEE,MAAF,CAASC,MAAvB;AACAf,uBAASD,YAAYmB,KAAZ,CAAkBC,IAAlB,CAAuBpB,WAAvB,CAAT;AACAA,0BAAYmB,KAAZ,GAAoB,MAAM;AACxB,sBAAM,IAAIf,KAAJ,CAAU,sEAAV,CAAN;AACD,eAFD;AAGAG,sBAAQP,WAAR;AACD,aAPD;AAQAS,oBAAQY,OAAR,GAAkBR,KAAK;AACrBL,qBAAOK,EAAEE,MAAF,CAASO,KAAhB;AACD,aAFD;AAGD,WAjBM,CAAP;AAkBD;;AAED,eAAOL,aAAP,CAAqBH,UAArB,EAAiC;AAC/B,gBAAMS,SAAS,CAAC,aAAD,CAAf;AACA,eAAK,IAAIC,KAAT,IAAkBD,MAAlB,EAA0B;AACxB,gBAAIT,WAAWW,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EAAiD;AAC/CV,yBAAWa,iBAAX,CAA6BH,KAA7B;AACD;AACDV,uBAAWc,iBAAX,CAA6BJ,KAA7B,EAAoC,EAAEK,eAAe,IAAjB,EAApC;AACD;AACF;;AAED,eAAOC,eAAP,GAAyB;AACvB7B;AACD;AAxC4B,O","file":"ConnectionFactory.js","sourcesContent":["let _connection = null;\nlet _close = null;\n\nexport class ConnectionFactory {\n\n  constructor() {\n    throw new Error(\"Você não deve criar instâncias dessa classe.\");\n  }\n\n  static getConnection() {\n    if (_connection) return _connection;\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(\"jscangaceiro\", 1);\n      request.onupgradeneeded = e => {\n        const connection = e.target.result;\n        ConnectionFactory._createStores(connection);\n      };\n      request.onsuccess = e => {\n        _connection = e.target.result;\n        _close = _connection.close.bind(_connection);\n        _connection.close = () => {\n          throw new Error(\"Você não pode fechar a conexão diretamente. Use a ConnectionFactory.\");\n        };\n        resolve(_connection);\n      };\n      request.onerror = e => {\n        reject(e.target.error);\n      };\n    });\n  }\n\n  static _createStores(connection) {\n    const stores = [\"negociacoes\"];\n    for (let store of stores) {\n      if (connection.objectStoreNames.contains(store)) {\n        connection.deleteObjectStore(store);\n      }\n      connection.createObjectStore(store, { autoIncrement: true });\n    }\n  }\n\n  static closeConnection() {\n    _close();\n  }\n}\n"]}